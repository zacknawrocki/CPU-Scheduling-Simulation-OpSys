    // Sort items into queue
    //for (int i = 0; i < num_of_proc; i++) {
    //    queue[i] = fcfs_ptr_pcs;
    //    fcfs_ptr_pcs++;
    //}
    /*
    int proc = 0;
    int time = 0;
    while (proc < num_procs) {
    	for (int i = 0; i < num_procs; ++i) {
    		int tie_breaker[num_procs];
    		int num_ties = 0;
    		if ((*(procs + i) + 0)->t_arrive == time) {
    			tie_breaker[num_ties] = i;
    			proc ++;
    			num_ties += 1;
    		}
    		// Tie breaker rules from assignment
    		for (int j = 0; j < num_ties; j++) {
    			// queue_push(q, *(procs + j));
    		}
    	}
    	time ++;
    }
*/

/*
    // Setup for FCFS Simulation
    int time = 0;
    int wait_times[num_of_proc];
    int turn_around_times[num_of_proc];
    int bursts[num_of_proc];
    int burst_time = 0;
    int curr_index = 0;
    int newest_index = -1;
    int context_switches = 0;
    int avg_BT = 0;
    int avg_WT = 0;
    int avg_TAT = 0;
    printf("time 0ms: Simulator started for FCFS [Q <empty>]\n");


    // FCFS Simulation
    while(1) {
        // Check if something can arrive to queue at this given time
        fcfs_ptr_pcs = fcfs_all_processes;
        for (int i = 0; i < num_of_proc; i++) {
            if (fcfs_ptr_pcs->t_arrive == time) {
                // Add to queue
                if (newest_index == -1) {
                    newest_index = 0;
                }
                fcfs_ptr_pcs->WT = time;
                queue[newest_index] = fcfs_ptr_pcs;
                bursts[newest_index] = fcfs_ptr_pcs->num_cpu_burst; 
                newest_index += 1;

                // Print that you have added to queue
                printf("time %dms: Process %c arrived; added to ready queue [Q ", time, fcfs_ptr_pcs->id);
                  // If queue is now empty, after starting new process
                if (curr_index == newest_index) {
                    printf("<empty>]\n");
                } else {
                    for (int j = curr_index; j < newest_index; j++) {
                        if (j != newest_index - 1) {
                            printf("%c ", queue[j]->id);
                        } else {
                            printf("%c", queue[j]->id);
                        }
                    }
                    printf("]\n");
                } 
            }
            fcfs_ptr_pcs++;
        }

        // If the current process is done, a new process is started and the queue is updated
        if (burst_time <= 0 && newest_index != -1) {
            if (curr_index > 0 && burst_time == 0) {
                // Print the old process has terminated
                printf("time %dms: Process %c terminated [Q ", time, queue[curr_index - 1]->id);
                // If queue is now empty, after starting new process
                if (curr_index == newest_index) {
                    printf("<empty>]\n");
                } else {
                    for (int j = curr_index; j < newest_index; j++) {
                        if (j != newest_index - 1) {
                            printf("%c ", queue[j]->id);
                        } else {
                            printf("%c", queue[j]->id);
                        }
                    }
                    printf("]\n");
                }
            }
            // Every process has been taken care of -- done with FCFS simulation
            if (curr_index == num_of_proc) {
                printf("time %dms: Simulator ended for FCFS [Q <empty>]\n", time);
                break;
            }
            // Iterate to next time if nothing is in the queue
            if (curr_index == newest_index) {
                time += 1;
                burst_time -= 1;
                continue;
            }
            // Simulate "popping a queue" by iterating to next index
            curr_index += 1;
            burst_time = queue[curr_index - 1]->num_cpu_burst;
            // Store the current process' wait time, to find the average later
            wait_times[curr_index - 1] = time - queue[curr_index - 1]->WT;
            // Store the previous process' turn around time, to find the average later
            turn_around_times[curr_index - 1] = time - queue[curr_index - 1]->WT;

            time += context_switch / 2;

            // Print that new process is using CPU
            if (curr_index <= newest_index) {
                printf("time %dms: Process %c started using the CPU for %dms burst [Q ", time, queue[curr_index - 1]->id, queue[curr_index - 1]->num_cpu_burst);
                // If queue is now empty, after starting new process
                if (curr_index == newest_index) {
                    printf("<empty>]\n");
                } else {
                    for (int j = curr_index; j < newest_index; j++) {
                        if (j != newest_index - 1) {
                            printf("%c ", queue[j]->id);
                        } else {
                            printf("%c", queue[j]->id);
                        }
                    }
                    printf("]\n");
                }
            } 
        }
        time++;
        burst_time--;
    }

    // Calculate averages and output in simout.txt
    for (int i = 0; i < num_of_proc; i++) {
        avg_BT += bursts[i];
        avg_WT += wait_times[i];
        avg_TAT += turn_around_times[i]; 
    }
    printf("\n"); 
    output_file(2, avg_BT / num_of_proc, avg_WT / num_of_proc, avg_TAT / num_of_proc, context_switches, 0);

    // Deallocate FCFS memory
    fcfs_ptr_pcs = fcfs_all_processes;
    for (int i = 0; i < num_of_proc; i++) {
        for (int j=0; j < fcfs_ptr_pcs->num_cpu_burst; j++){
            free(fcfs_ptr_pcs->burst[j]);
        }
        free(fcfs_ptr_pcs->burst);
        fcfs_ptr_pcs++;
    }
*/
